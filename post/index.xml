<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZL_Blog</title>
    <link>http://TonyLEE-ZL.github.io.git/post/</link>
    <description>Recent content in Posts on ZL_Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 28 Oct 2019 16:07:26 +0800</lastBuildDate>
    
	<atom:link href="http://TonyLEE-ZL.github.io.git/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>函数 (二)</title>
      <link>http://TonyLEE-ZL.github.io.git/post/10_28_1/</link>
      <pubDate>Mon, 28 Oct 2019 16:07:26 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/10_28_1/</guid>
      <description>返回类型和return语句 不要返回局部对象的引用或者指针。一旦函数完成，局部对象被释放，引用的内容不存在，指针也将指向不存在的对象。 列表初始</description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://TonyLEE-ZL.github.io.git/post/10_25_1/</link>
      <pubDate>Fri, 25 Oct 2019 09:08:23 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/10_25_1/</guid>
      <description>局部对象 有时有必要令局部变量的生命周期贯穿函数调用之后的时间，可以将局部变量定义成static类型。局部静态变量在程序执行第一次经过对象定义</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://TonyLEE-ZL.github.io.git/post/10_24_1/</link>
      <pubDate>Thu, 24 Oct 2019 11:37:15 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/10_24_1/</guid>
      <description>链表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iterator&amp;gt; using namespace std; typedef int T; struct Node { T data; Node* next; Node(const T&amp;amp; d) : data(d), next(NULL) {} operator T() { return data; } // 类型转换</description>
    </item>
    
    <item>
      <title>表达式 (二)</title>
      <link>http://TonyLEE-ZL.github.io.git/post/10_23_2/</link>
      <pubDate>Wed, 23 Oct 2019 16:16:16 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/10_23_2/</guid>
      <description>位运算符 位运算符作用于整数类型的运算对象。并把运算对象看成式二进制位的集合。 移位运算符 &amp;lt;&amp;lt; 左移运算符，bits &amp;lt;&amp;lt; 8 首先令左侧运算内容向左侧移动</description>
    </item>
    
    <item>
      <title>表达式 (一)</title>
      <link>http://TonyLEE-ZL.github.io.git/post/10_23_1/</link>
      <pubDate>Wed, 23 Oct 2019 09:39:47 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/10_23_1/</guid>
      <description>基础 左值：当对象被用作左值的时候，用的对象在内存中的位置。 右值：当一个对象被用作右值的时候用的是对象的值。 赋值运算符需要一个左值运算对象，得</description>
    </item>
    
    <item>
      <title>字符串 数组(二)</title>
      <link>http://TonyLEE-ZL.github.io.git/post/10_22_2/</link>
      <pubDate>Tue, 22 Oct 2019 13:27:17 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/10_22_2/</guid>
      <description>迭代器 迭代器类似于指针，提供了对对象的间接访问，string类型和容器都支持迭代器的操作。和指针不同的是获取迭代器不是使用取地址符。典型的成</description>
    </item>
    
    <item>
      <title>字符串 数组(一)</title>
      <link>http://TonyLEE-ZL.github.io.git/post/2019_10_22/</link>
      <pubDate>Tue, 22 Oct 2019 08:43:11 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/2019_10_22/</guid>
      <description>处理string对象中的字符 使用for语句遍历给定序列的每个元素并进行操作。 for(decl : expression) //express为string对象 decl 表示要操作的元素 例子</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基本类型(一)</title>
      <link>http://TonyLEE-ZL.github.io.git/post/test/</link>
      <pubDate>Sat, 19 Oct 2019 19:09:11 +0800</pubDate>
      
      <guid>http://TonyLEE-ZL.github.io.git/post/test/</guid>
      <description>变量初始化 未被初始化的的变量被访问和拷贝会引发错误。 定义在函数体外部的变量会被初始化为0。 类对象未初始化时则有其初值决定。定义在函数体内部变</description>
    </item>
    
  </channel>
</rss>